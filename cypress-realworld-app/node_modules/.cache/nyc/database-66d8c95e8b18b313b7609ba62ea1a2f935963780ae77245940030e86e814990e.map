{"version":3,"file":"/Users/alimran/cypress-realworld-app/backend/database.ts","sources":["/Users/alimran/cypress-realworld-app/backend/database.ts"],"names":[],"mappings":"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","sourcesContent":["import path from \"path\";\nimport bcrypt from \"bcryptjs\";\nimport fs from \"fs\";\nimport { v4 } from \"uuid\";\nimport {\n  uniqBy,\n  map,\n  sample,\n  reject,\n  includes,\n  orderBy,\n  flow,\n  flatMap,\n  curry,\n  get,\n  constant,\n  filter,\n  inRange,\n  remove,\n} from \"lodash/fp\";\nimport { isWithinInterval } from \"date-fns\";\nimport low from \"lowdb\";\nimport FileSync from \"lowdb/adapters/FileSync\";\nimport shortid from \"shortid\";\nimport {\n  BankAccount,\n  Transaction,\n  User,\n  Contact,\n  TransactionStatus,\n  TransactionRequestStatus,\n  Like,\n  Comment,\n  PaymentNotification,\n  PaymentNotificationStatus,\n  LikeNotification,\n  CommentNotification,\n  NotificationType,\n  NotificationPayloadType,\n  NotificationsType,\n  TransactionResponseItem,\n  TransactionPayload,\n  BankTransfer,\n  BankTransferPayload,\n  BankTransferType,\n  NotificationResponseItem,\n  TransactionQueryPayload,\n  DefaultPrivacyLevel,\n} from \"../src/models\";\nimport Fuse from \"fuse.js\";\nimport {\n  isPayment,\n  getTransferAmount,\n  hasSufficientFunds,\n  getChargeAmount,\n  hasDateQueryFields,\n  getDateQueryFields,\n  hasAmountQueryFields,\n  getAmountQueryFields,\n  getQueryWithoutFilterFields,\n  getPayAppCreditedAmount,\n  isRequestTransaction,\n  formatFullName,\n  isLikeNotification,\n  isCommentNotification,\n} from \"../src/utils/transactionUtils\";\nimport { DbSchema } from \"../src/models/db-schema\";\n\nexport type TDatabase = {\n  users: User[];\n  contacts: Contact[];\n  bankaccounts: BankAccount[];\n  transactions: Transaction[];\n  likes: Like[];\n  comments: Comment[];\n  notifications: NotificationType[];\n  banktransfers: BankTransfer[];\n};\n\nconst USER_TABLE = \"users\";\nconst CONTACT_TABLE = \"contacts\";\nconst BANK_ACCOUNT_TABLE = \"bankaccounts\";\nconst TRANSACTION_TABLE = \"transactions\";\nconst LIKE_TABLE = \"likes\";\nconst COMMENT_TABLE = \"comments\";\nconst NOTIFICATION_TABLE = \"notifications\";\nconst BANK_TRANSFER_TABLE = \"banktransfers\";\n\nconst databaseFile = path.join(__dirname, \"../data/database.json\");\nconst adapter = new FileSync<DbSchema>(databaseFile);\n\nconst db = low(adapter);\n\nexport const seedDatabase = () => {\n  const testSeed = JSON.parse(\n    fs.readFileSync(path.join(process.cwd(), \"data\", \"database-seed.json\"), \"utf-8\")\n  );\n\n  // seed database with test data\n  db.setState(testSeed).write();\n  return;\n};\n\nexport const getAllUsers = () => db.get(USER_TABLE).value();\n\nexport const getAllPublicTransactions = () =>\n  db.get(TRANSACTION_TABLE).filter({ privacyLevel: DefaultPrivacyLevel.public }).value();\n\nexport const getAllForEntity = (entity: keyof DbSchema) => db.get(entity).value();\n\nexport const getAllBy = (entity: keyof DbSchema, key: string, value: any) => {\n  const result = db\n    .get(entity)\n    // @ts-ignore\n    .filter({ [`${key}`]: value })\n    .value();\n\n  return result;\n};\n\nexport const getBy = (entity: keyof DbSchema, key: string, value: any) => {\n  const result = db\n    .get(entity)\n    // @ts-ignore\n    .find({ [`${key}`]: value })\n    .value();\n\n  return result;\n};\n\nexport const getAllByObj = (entity: keyof DbSchema, query: object) => {\n  const result = db\n    .get(entity)\n    // @ts-ignore\n    .filter(query)\n    .value();\n\n  return result;\n};\n\n// Search\nexport const cleanSearchQuery = (query: string) => query.replace(/[^a-zA-Z0-9]/g, \"\");\n\nexport const setupSearch = curry((items: object[], options: {}, query: string) => {\n  const fuse = new Fuse(items, options);\n  return fuse.search(query);\n});\n\nexport const performSearch = (items: object[], options: {}, query: string) =>\n  flow(\n    cleanSearchQuery,\n    setupSearch(items, options),\n    map((result) => result.item)\n  )(query);\n\nexport const searchUsers = (query: string) => {\n  const items = getAllUsers();\n  return performSearch(\n    items,\n    {\n      keys: [\"firstName\", \"lastName\", \"username\", \"email\", \"phoneNumber\"],\n    },\n    query\n  ) as User[];\n};\n\nexport const removeUserFromResults = (userId: User[\"id\"], results: User[]) =>\n  remove({ id: userId }, results);\n\n// convenience methods\n\n// User\nexport const getUserBy = (key: string, value: any) => getBy(USER_TABLE, key, value);\nexport const getUserId = (user: User): string => user.id;\nexport const getUserById = (id: string) => getUserBy(\"id\", id);\nexport const getUserByUsername = (username: string) => getUserBy(\"username\", username);\n\nexport const createUser = (userDetails: Partial<User>): User => {\n  const password = bcrypt.hashSync(userDetails.password!, 10);\n  const user: User = {\n    id: shortid(),\n    uuid: v4(),\n    firstName: userDetails.firstName!,\n    lastName: userDetails.lastName!,\n    username: userDetails.username!,\n    password,\n    email: userDetails.email!,\n    phoneNumber: userDetails.phoneNumber!,\n    balance: Number(userDetails.balance!) || 0,\n    avatar: userDetails.avatar!,\n    defaultPrivacyLevel: userDetails.defaultPrivacyLevel!,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  saveUser(user);\n  return user;\n};\n\nconst saveUser = (user: User) => {\n  db.get(USER_TABLE).push(user).write();\n};\n\nexport const updateUserById = (userId: string, edits: Partial<User>) => {\n  const user = getUserById(userId);\n\n  db.get(USER_TABLE).find(user).assign(edits).write();\n};\n\n// Contact\nexport const getContactBy = (key: string, value: any) => getBy(CONTACT_TABLE, key, value);\n\nexport const getContactsBy = (key: string, value: any) => getAllBy(CONTACT_TABLE, key, value);\n\nexport const getContactsByUsername = (username: string) =>\n  flow(getUserByUsername, getUserId, getContactsByUserId)(username);\n\nexport const getContactsByUserId = (userId: string): Contact[] => getContactsBy(\"userId\", userId);\n\nexport const createContact = (contact: Contact) => {\n  db.get(CONTACT_TABLE).push(contact).write();\n\n  // manual lookup after create\n  return getContactBy(\"id\", contact.id);\n};\n\nexport const removeContactById = (contactId: string) => {\n  const contact = getContactBy(\"id\", contactId);\n\n  db.get(CONTACT_TABLE).remove(contact).write();\n};\n\nexport const createContactForUser = (userId: string, contactUserId: string) => {\n  const contactId = shortid();\n  const contact: Contact = {\n    id: contactId,\n    uuid: v4(),\n    userId,\n    contactUserId,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  // Write contact record to the database\n  const result = createContact(contact);\n\n  return result;\n};\n\n// Bank Account\nexport const getBankAccountBy = (key: string, value: any) => getBy(BANK_ACCOUNT_TABLE, key, value);\n\nexport const getBankAccountById = (id: string) => getBankAccountBy(\"id\", id);\n\nexport const getBankAccountsBy = (key: string, value: any) =>\n  getAllBy(BANK_ACCOUNT_TABLE, key, value);\n\nexport const createBankAccount = (bankaccount: BankAccount) => {\n  db.get(BANK_ACCOUNT_TABLE).push(bankaccount).write();\n\n  // manual lookup after create\n  return getBankAccountBy(\"id\", bankaccount.id);\n};\n\nexport const createBankAccountForUser = (userId: string, accountDetails: Partial<BankAccount>) => {\n  const accountId = shortid();\n  const bankaccount: BankAccount = {\n    id: accountId,\n    uuid: v4(),\n    userId,\n    bankName: accountDetails.bankName!,\n    accountNumber: accountDetails.accountNumber!,\n    routingNumber: accountDetails.routingNumber!,\n    isDeleted: false,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  // Write bank account record to the database\n  const result = createBankAccount(bankaccount);\n\n  return result;\n};\n\nexport const removeBankAccountById = (bankAccountId: string) => {\n  db.get(BANK_ACCOUNT_TABLE)\n    .find({ id: bankAccountId })\n    .assign({ isDeleted: true }) // soft delete\n    .write();\n};\n\n// Bank Transfer\n// Note: Balance transfers from/to bank accounts is a future feature,\n// but some of the backend database functionality is already implemented here.\n\n/* istanbul ignore next */\nexport const getBankTransferBy = (key: string, value: any) =>\n  getBy(BANK_TRANSFER_TABLE, key, value);\n\nexport const getBankTransfersBy = (key: string, value: any) =>\n  getAllBy(BANK_TRANSFER_TABLE, key, value);\n\nexport const getBankTransfersByUserId = (userId: string) => getBankTransfersBy(\"userId\", userId);\n\n/* istanbul ignore next */\nexport const createBankTransfer = (bankTransferDetails: BankTransferPayload) => {\n  const bankTransfer: BankTransfer = {\n    id: shortid(),\n    uuid: v4(),\n    ...bankTransferDetails,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  const savedBankTransfer = saveBankTransfer(bankTransfer);\n  return savedBankTransfer;\n};\n\n/* istanbul ignore next */\nconst saveBankTransfer = (bankTransfer: BankTransfer): BankTransfer => {\n  db.get(BANK_TRANSFER_TABLE).push(bankTransfer).write();\n\n  // manual lookup after banktransfer created\n  return getBankTransferBy(\"id\", bankTransfer.id);\n};\n\n// Transaction\n\nexport const getTransactionBy = (key: string, value: any) => getBy(TRANSACTION_TABLE, key, value);\n\nexport const getTransactionById = (id: string) => getTransactionBy(\"id\", id);\n\nexport const getTransactionsByObj = (query: object) => getAllByObj(TRANSACTION_TABLE, query);\n\nexport const getTransactionByIdForApi = (id: string) =>\n  formatTransactionForApiResponse(getTransactionBy(\"id\", id));\n\nexport const getTransactionsForUserForApi = (userId: string, query?: object) =>\n  flow(getTransactionsForUserByObj(userId), formatTransactionsForApiResponse)(query);\n\nexport const getFullNameForUser = (userId: User[\"id\"]) => flow(getUserById, formatFullName)(userId);\n\nexport const formatTransactionForApiResponse = (\n  transaction: Transaction\n): TransactionResponseItem => {\n  const receiver = getUserById(transaction.receiverId);\n  const sender = getUserById(transaction.senderId);\n\n  const receiverName = getFullNameForUser(transaction.receiverId);\n  const senderName = getFullNameForUser(transaction.senderId);\n  const likes = getLikesByTransactionId(transaction.id);\n  const comments = getCommentsByTransactionId(transaction.id);\n\n  return {\n    receiverName,\n    senderName,\n    receiverAvatar: receiver.avatar,\n    senderAvatar: sender.avatar,\n    likes,\n    comments,\n    ...transaction,\n  };\n};\n\nexport const formatTransactionsForApiResponse = (\n  transactions: Transaction[]\n): TransactionResponseItem[] =>\n  orderBy(\n    [(transaction: Transaction) => new Date(transaction.modifiedAt)],\n    [\"desc\"],\n    transactions.map((transaction) => formatTransactionForApiResponse(transaction))\n  );\n\nexport const getAllTransactionsForUserByObj = curry((userId: string, query?: object) => {\n  const queryWithoutFilterFields = query && getQueryWithoutFilterFields(query);\n\n  const queryFields = queryWithoutFilterFields || query;\n\n  const userTransactions = flatMap(getTransactionsByObj)([\n    {\n      receiverId: userId,\n      ...queryFields,\n    },\n    {\n      senderId: userId,\n      ...queryFields,\n    },\n  ]);\n\n  if (query && (hasDateQueryFields(query) || hasAmountQueryFields(query))) {\n    const { dateRangeStart, dateRangeEnd } = getDateQueryFields(query);\n    const { amountMin, amountMax } = getAmountQueryFields(query);\n\n    return flow(\n      transactionsWithinDateRange(dateRangeStart!, dateRangeEnd!),\n      transactionsWithinAmountRange(amountMin!, amountMax!)\n    )(userTransactions);\n  }\n  return userTransactions;\n});\n\nexport const transactionsWithinAmountRange = curry(\n  (amountMin: number, amountMax: number, transactions: Transaction[]) => {\n    if (!amountMin || !amountMax) {\n      return transactions;\n    }\n\n    return filter(\n      (transaction: Transaction) => inRange(amountMin, amountMax, transaction.amount),\n      transactions\n    );\n  }\n);\n\nexport const transactionsWithinDateRange = curry(\n  (dateRangeStart: string, dateRangeEnd: string, transactions: Transaction[]) => {\n    if (!dateRangeStart || !dateRangeEnd) {\n      return transactions;\n    }\n\n    return filter(\n      (transaction: Transaction) =>\n        isWithinInterval(new Date(transaction.createdAt), {\n          start: new Date(dateRangeStart),\n          end: new Date(dateRangeEnd),\n        }),\n      transactions\n    );\n  }\n);\n\nexport const getTransactionsForUserByObj = curry((userId: string, query: object) =>\n  flow(getAllTransactionsForUserByObj(userId), uniqBy(\"id\"))(query)\n);\n\nexport const getContactIdsForUser = (userId: string): Contact[\"id\"][] =>\n  flow(getContactsByUserId, map(\"contactUserId\"))(userId);\n\nexport const getTransactionsForUserContacts = (userId: string, query?: object) =>\n  uniqBy(\n    \"id\",\n    flatMap(\n      (contactId) => getTransactionsForUserForApi(contactId, query),\n      getContactIdsForUser(userId)\n    )\n  );\n\nexport const getTransactionIds = (transactions: Transaction[]) => map(\"id\", transactions);\n\nexport const getContactsTransactionIds = (userId: string): Transaction[\"id\"][] =>\n  flow(getTransactionsForUserContacts, getTransactionIds)(userId);\n\nexport const nonContactPublicTransactions = (userId: string): Transaction[] => {\n  const contactsTransactionIds = getContactsTransactionIds(userId);\n  return flow(\n    getAllPublicTransactions,\n    reject((transaction: Transaction) => includes(transaction.id, contactsTransactionIds))\n  )();\n};\n\nexport const getNonContactPublicTransactionsForApi = (userId: string) =>\n  flow(nonContactPublicTransactions, formatTransactionsForApiResponse)(userId);\n\nexport const getPublicTransactionsDefaultSort = (userId: string) => ({\n  contactsTransactions: getTransactionsForUserContacts(userId),\n  publicTransactions: getNonContactPublicTransactionsForApi(userId),\n});\n\nexport const getPublicTransactionsByQuery = (userId: string, query: TransactionQueryPayload) => {\n  if (query && (hasDateQueryFields(query) || hasAmountQueryFields(query))) {\n    const { dateRangeStart, dateRangeEnd } = getDateQueryFields(query);\n    const { amountMin, amountMax } = getAmountQueryFields(query);\n\n    return {\n      contactsTransactions: getTransactionsForUserContacts(userId, query),\n      publicTransactions: flow(\n        transactionsWithinDateRange(dateRangeStart!, dateRangeEnd!),\n        transactionsWithinAmountRange(amountMin!, amountMax!)\n      )(getNonContactPublicTransactionsForApi(userId)),\n    };\n  } else {\n    return {\n      contactsTransactions: getTransactionsForUserContacts(userId),\n      publicTransactions: getNonContactPublicTransactionsForApi(userId),\n    };\n  }\n};\n\nexport const resetPayAppBalance = constant(0);\n\nexport const debitPayAppBalance = (user: User, transaction: Transaction) => {\n  if (hasSufficientFunds(user, transaction)) {\n    flow(getChargeAmount, savePayAppBalance(user))(user, transaction);\n  } else {\n    /* istanbul ignore next */\n    flow(\n      getTransferAmount(user),\n      createBankTransferWithdrawal(user, transaction),\n      resetPayAppBalance,\n      savePayAppBalance(user)\n    )(transaction);\n  }\n};\n\nexport const creditPayAppBalance = (user: User, transaction: Transaction) =>\n  flow(getPayAppCreditedAmount, savePayAppBalance(user))(user, transaction);\n\n/* istanbul ignore next */\nexport const createBankTransferWithdrawal = curry(\n  (sender: User, transaction: Transaction, transferAmount: number) =>\n    createBankTransfer({\n      userId: sender.id,\n      source: transaction.source,\n      amount: transferAmount,\n      transactionId: transaction.id,\n      type: BankTransferType.withdrawal,\n    })\n);\n\nexport const savePayAppBalance = curry((sender: User, balance: number) =>\n  updateUserById(get(\"id\", sender), { balance })\n);\n\nexport const createTransaction = (\n  userId: User[\"id\"],\n  transactionType: \"payment\" | \"request\",\n  transactionDetails: TransactionPayload\n): Transaction => {\n  const sender = getUserById(userId);\n  const receiver = getUserById(transactionDetails.receiverId);\n  const transaction: Transaction = {\n    id: shortid(),\n    uuid: v4(),\n    source: transactionDetails.source,\n    amount: transactionDetails.amount * 100,\n    description: transactionDetails.description,\n    receiverId: transactionDetails.receiverId,\n    senderId: userId,\n    privacyLevel: transactionDetails.privacyLevel || sender.defaultPrivacyLevel,\n    status: TransactionStatus.pending,\n    requestStatus: transactionType === \"request\" ? TransactionRequestStatus.pending : undefined,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  const savedTransaction = saveTransaction(transaction);\n\n  // if payment, debit sender's balance for payment amount\n  if (isPayment(transaction)) {\n    debitPayAppBalance(sender, transaction);\n    creditPayAppBalance(receiver, transaction);\n    updateTransactionById(transaction.id, {\n      status: TransactionStatus.complete,\n    });\n    createPaymentNotification(\n      transaction.receiverId,\n      transaction.id,\n      PaymentNotificationStatus.received\n    );\n  } else {\n    createPaymentNotification(\n      transaction.receiverId,\n      transaction.id,\n      PaymentNotificationStatus.requested\n    );\n  }\n\n  return savedTransaction;\n};\n\nconst saveTransaction = (transaction: Transaction): Transaction => {\n  db.get(TRANSACTION_TABLE).push(transaction).write();\n\n  // manual lookup after transaction created\n  return getTransactionBy(\"id\", transaction.id);\n};\n\nexport const updateTransactionById = (transactionId: string, edits: Partial<Transaction>) => {\n  const transaction = getTransactionBy(\"id\", transactionId);\n  const { senderId, receiverId } = transaction;\n  const sender = getUserById(senderId);\n  const receiver = getUserById(receiverId);\n\n  // if payment, debit sender's balance for payment amount\n  if (isRequestTransaction(transaction)) {\n    debitPayAppBalance(receiver, transaction);\n    creditPayAppBalance(sender, transaction);\n    edits.status = TransactionStatus.complete;\n\n    createPaymentNotification(\n      transaction.senderId,\n      transaction.id,\n      PaymentNotificationStatus.received\n    );\n  }\n\n  db.get(TRANSACTION_TABLE).find(transaction).assign(edits).write();\n};\n\n// Likes\n\nexport const getLikeBy = (key: string, value: any): Like => getBy(LIKE_TABLE, key, value);\nexport const getLikesByObj = (query: object) => getAllByObj(LIKE_TABLE, query);\n\nexport const getLikeById = (id: string): Like => getLikeBy(\"id\", id);\nexport const getLikesByTransactionId = (transactionId: string) => getLikesByObj({ transactionId });\n\nexport const createLike = (userId: string, transactionId: string): Like => {\n  const like = {\n    id: shortid(),\n    uuid: v4(),\n    userId,\n    transactionId,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  const savedLike = saveLike(like);\n  return savedLike;\n};\n\nexport const createLikes = (userId: string, transactionId: string) => {\n  const { senderId, receiverId } = getTransactionById(transactionId);\n\n  const like = createLike(userId, transactionId);\n\n  /* istanbul ignore next */\n  if (userId !== senderId || userId !== receiverId) {\n    createLikeNotification(senderId, transactionId, like.id);\n    createLikeNotification(receiverId, transactionId, like.id);\n  } else if (userId === senderId) {\n    createLikeNotification(senderId, transactionId, like.id);\n  } else {\n    createLikeNotification(receiverId, transactionId, like.id);\n  }\n};\n\nconst saveLike = (like: Like): Like => {\n  db.get(LIKE_TABLE).push(like).write();\n\n  // manual lookup after like created\n  return getLikeById(like.id);\n};\n\n// Comments\n\nexport const getCommentBy = (key: string, value: any): Comment => getBy(COMMENT_TABLE, key, value);\nexport const getCommentsByObj = (query: object) => getAllByObj(COMMENT_TABLE, query);\n\nexport const getCommentById = (id: string): Comment => getCommentBy(\"id\", id);\nexport const getCommentsByTransactionId = (transactionId: string) =>\n  getCommentsByObj({ transactionId });\n\nexport const createComment = (userId: string, transactionId: string, content: string): Comment => {\n  const comment = {\n    id: shortid(),\n    uuid: v4(),\n    content,\n    userId,\n    transactionId,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  const savedComment = saveComment(comment);\n  return savedComment;\n};\n\nexport const createComments = (userId: string, transactionId: string, content: string) => {\n  const { senderId, receiverId } = getTransactionById(transactionId);\n\n  const comment = createComment(userId, transactionId, content);\n\n  /* istanbul ignore next */\n  if (userId !== senderId || userId !== receiverId) {\n    createCommentNotification(senderId, transactionId, comment.id);\n    createCommentNotification(receiverId, transactionId, comment.id);\n  } else if (userId === senderId) {\n    createCommentNotification(senderId, transactionId, comment.id);\n  } else {\n    createCommentNotification(receiverId, transactionId, comment.id);\n  }\n};\n\nconst saveComment = (comment: Comment): Comment => {\n  db.get(COMMENT_TABLE).push(comment).write();\n\n  // manual lookup after comment created\n  return getCommentById(comment.id);\n};\n\n// Notifications\n\nexport const getNotificationBy = (key: string, value: any): NotificationType =>\n  getBy(NOTIFICATION_TABLE, key, value);\n\nexport const getNotificationsByObj = (query: object): Notification[] =>\n  getAllByObj(NOTIFICATION_TABLE, query);\n\nexport const getUnreadNotificationsByUserId = (userId: string) =>\n  flow(getNotificationsByObj, formatNotificationsForApiResponse)({ userId, isRead: false });\n\nexport const createPaymentNotification = (\n  userId: string,\n  transactionId: string,\n  status: PaymentNotificationStatus\n): PaymentNotification => {\n  const notification: PaymentNotification = {\n    id: shortid(),\n    uuid: v4(),\n    userId: userId,\n    transactionId: transactionId,\n    status,\n    isRead: false,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  saveNotification(notification);\n  return notification;\n};\n\nexport const createLikeNotification = (\n  userId: string,\n  transactionId: string,\n  likeId: string\n): LikeNotification => {\n  const notification: LikeNotification = {\n    id: shortid(),\n    uuid: v4(),\n    userId: userId,\n    transactionId: transactionId,\n    likeId: likeId,\n    isRead: false,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  saveNotification(notification);\n  return notification;\n};\n\nexport const createCommentNotification = (\n  userId: string,\n  transactionId: string,\n  commentId: string\n): CommentNotification => {\n  const notification: CommentNotification = {\n    id: shortid(),\n    uuid: v4(),\n    userId: userId,\n    transactionId: transactionId,\n    commentId: commentId,\n    isRead: false,\n    createdAt: new Date(),\n    modifiedAt: new Date(),\n  };\n\n  saveNotification(notification);\n  return notification;\n};\n\nconst saveNotification = (notification: NotificationType) => {\n  db.get(NOTIFICATION_TABLE).push(notification).write();\n};\n\nexport const createNotifications = (userId: string, notifications: NotificationPayloadType[]) =>\n  notifications.flatMap((item: NotificationPayloadType) => {\n    if (\"status\" in item && item.type === NotificationsType.payment) {\n      return createPaymentNotification(userId, item.transactionId, item.status);\n    } else if (\"likeId\" in item && item.type === NotificationsType.like) {\n      return createLikeNotification(userId, item.transactionId, item.likeId);\n    } else {\n      /* istanbul ignore next */\n      if (\"commentId\" in item) {\n        return createCommentNotification(userId, item.transactionId, item.commentId);\n      }\n    }\n  });\n\nexport const updateNotificationById = (\n  userId: string,\n  notificationId: string,\n  edits: Partial<NotificationType>\n) => {\n  const notification = getNotificationBy(\"id\", notificationId);\n\n  db.get(NOTIFICATION_TABLE).find(notification).assign(edits).write();\n};\n\nexport const formatNotificationForApiResponse = (\n  notification: NotificationType\n): NotificationResponseItem => {\n  let userFullName = getFullNameForUser(notification.userId);\n  const transaction = getTransactionById(notification.transactionId);\n\n  if (isRequestTransaction(transaction)) {\n    userFullName = getFullNameForUser(transaction.senderId);\n  }\n\n  if (isLikeNotification(notification)) {\n    const like = getLikeById(notification.likeId);\n    userFullName = getFullNameForUser(like.userId);\n  }\n\n  if (isCommentNotification(notification)) {\n    const comment = getCommentById(notification.commentId);\n    userFullName = getFullNameForUser(comment.userId);\n  }\n\n  return {\n    userFullName,\n    ...notification,\n  };\n};\n\nexport const formatNotificationsForApiResponse = (\n  notifications: NotificationResponseItem[]\n): NotificationResponseItem[] =>\n  orderBy(\n    [(notification: NotificationResponseItem) => new Date(notification.modifiedAt)],\n    [\"desc\"],\n    notifications.map((notification) => formatNotificationForApiResponse(notification))\n  );\n\n// dev/test private methods\n/* istanbul ignore next */\nexport const getRandomUser = () => {\n  const users = getAllUsers();\n  return sample(users)!;\n};\n\n/* istanbul ignore next */\nexport const getAllContacts = () => db.get(CONTACT_TABLE).value();\n\n/* istanbul ignore next */\nexport const getAllTransactions = () => db.get(TRANSACTION_TABLE).value();\n\n/* istanbul ignore */\nexport const getBankAccountsByUserId = (userId: string) => getBankAccountsBy(\"userId\", userId);\n\n/* istanbul ignore next */\nexport const getNotificationById = (id: string): NotificationType => getNotificationBy(\"id\", id);\n\n/* istanbul ignore next */\nexport const getNotificationsByUserId = (userId: string) => getNotificationsByObj({ userId });\n\n/* istanbul ignore next */\nexport const getBankTransferByTransactionId = (transactionId: string) =>\n  getBankTransferBy(\"transactionId\", transactionId);\n\n/* istanbul ignore next */\nexport const getTransactionsBy = (key: string, value: string) =>\n  getAllBy(TRANSACTION_TABLE, key, value);\n\n/* istanbul ignore next */\nexport const getTransactionsByUserId = (userId: string) => getTransactionsBy(\"receiverId\", userId);\n\nexport default db;\n"]}