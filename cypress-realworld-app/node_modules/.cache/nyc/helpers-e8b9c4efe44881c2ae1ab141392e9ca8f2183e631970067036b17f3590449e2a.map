{"version":3,"file":"/Users/alimran/cypress-realworld-app/backend/helpers.ts","sources":["/Users/alimran/cypress-realworld-app/backend/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import dotenv from \"dotenv\";\nimport { set } from \"lodash\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { validationResult } from \"express-validator\";\nimport jwt from \"express-jwt\";\nimport jwksRsa from \"jwks-rsa\";\n\n// @ts-ignore\nimport OktaJwtVerifier from \"@okta/jwt-verifier\";\n// @ts-ignore\nimport awsConfig from \"../src/aws-exports\";\n\ndotenv.config();\n\nconst auth0JwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `https://${process.env.VITE_AUTH0_DOMAIN}/.well-known/jwks.json`,\n  }),\n\n  // Validate the audience and the issuer.\n  audience: process.env.VITE_AUTH0_AUDIENCE,\n  issuer: `https://${process.env.VITE_AUTH0_DOMAIN}/`,\n  algorithms: [\"RS256\"],\n};\n\n// Okta Validate the JWT Signature\nconst oktaJwtVerifier = new OktaJwtVerifier({\n  issuer: `https://${process.env.VITE_OKTA_DOMAIN}/oauth2/default`,\n  clientId: process.env.VITE_OKTA_CLIENTID,\n  assertClaims: {\n    aud: \"api://default\",\n    cid: process.env.VITE_OKTA_CLIENTID,\n  },\n});\nconst googleJwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: \"https://www.googleapis.com/oauth2/v3/certs\",\n  }),\n\n  // Validate the audience and the issuer.\n  audience: process.env.VITE_GOOGLE_CLIENTID,\n  issuer: \"accounts.google.com\",\n  algorithms: [\"RS256\"],\n};\n\n/* istanbul ignore next */\nexport const verifyOktaToken = (req: Request, res: Response, next: NextFunction) => {\n  const bearerHeader = req.headers[\"authorization\"];\n\n  if (bearerHeader) {\n    const bearer = bearerHeader.split(\" \");\n    const bearerToken = bearer[1];\n\n    oktaJwtVerifier\n      .verifyAccessToken(bearerToken, \"api://default\")\n      .then((jwt: any) => {\n        // the token is valid\n        req.user = {\n          // @ts-ignore\n          sub: jwt.sub,\n        };\n        return next();\n      })\n      .catch((err: any) => {\n        // a validation failed, inspect the error\n        console.log(\"error\", err);\n      });\n  } else {\n    res.status(401).send({\n      error: \"Unauthorized\",\n    });\n  }\n};\n\n// Amazon Cognito Validate the JWT Signature\n// https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-verifying-a-jwt.html#amazon-cognito-user-pools-using-tokens-step-2\nconst userPoolId = awsConfig.Auth.Cognito.userPoolId;\nconst region = userPoolId.split(\"_\")[0];\nconst awsCognitoJwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    jwksUri: `https://cognito-idp.${region}.amazonaws.com/${userPoolId}/.well-known/jwks.json`,\n  }),\n\n  issuer: `https://cognito-idp.${region}.amazonaws.com/${userPoolId}`,\n  algorithms: [\"RS256\"],\n};\n\nexport const checkAuth0Jwt = jwt(auth0JwtConfig).unless({ path: [\"/testData/*\"] });\nexport const checkCognitoJwt = jwt(awsCognitoJwtConfig).unless({ path: [\"/testData/*\"] });\nexport const checkGoogleJwt = jwt(googleJwtConfig).unless({ path: [\"/testData/*\"] });\n\nexport const ensureAuthenticated = (req: Request, res: Response, next: NextFunction) => {\n  if (req.isAuthenticated()) {\n    // @ts-ignore\n    // Map sub to id on req.user\n    if (req.user?.sub) {\n      /* istanbul ignore next */\n      // @ts-ignore\n      set(req.user, \"id\", req.user.sub);\n    }\n    return next();\n  }\n  /* istanbul ignore next */\n  res.status(401).send({\n    error: \"Unauthorized\",\n  });\n};\n\nexport const validateMiddleware = (validations: any[]) => {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    await Promise.all(validations.map((validation: any) => validation.run(req)));\n\n    const errors = validationResult(req);\n    if (errors.isEmpty()) {\n      return next();\n    }\n\n    res.status(422).json({ errors: errors.array() });\n  };\n};\n"]}