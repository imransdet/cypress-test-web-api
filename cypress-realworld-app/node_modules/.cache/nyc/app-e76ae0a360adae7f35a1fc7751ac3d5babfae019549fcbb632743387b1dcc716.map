{"version":3,"file":"/Users/alimran/AquaProjects/CypressDemoProject/cypress-realworld-app-new/backend/app.ts","sources":["/Users/alimran/AquaProjects/CypressDemoProject/cypress-realworld-app-new/backend/app.ts"],"names":[],"mappings":"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","sourcesContent":["import express from \"express\";\nimport { join } from \"path\";\nimport logger from \"morgan\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport paginate from \"express-paginate\";\nimport { createHandler as graphqlHandler } from \"graphql-http/lib/use/express\";\nimport { loadSchemaSync } from \"@graphql-tools/load\";\nimport { GraphQLFileLoader } from \"@graphql-tools/graphql-file-loader\";\nimport { addResolversToSchema } from \"@graphql-tools/schema\";\n\nimport auth from \"./auth\";\nimport userRoutes from \"./user-routes\";\nimport contactRoutes from \"./contact-routes\";\nimport bankAccountRoutes from \"./bankaccount-routes\";\nimport gqlPlaygroundRoutes from \"./gql-playground-routes\";\nimport transactionRoutes from \"./transaction-routes\";\nimport likeRoutes from \"./like-routes\";\nimport commentRoutes from \"./comment-routes\";\nimport notificationRoutes from \"./notification-routes\";\nimport bankTransferRoutes from \"./banktransfer-routes\";\nimport testDataRoutes from \"./testdata-routes\";\nimport { checkAuth0Jwt, verifyOktaToken, checkCognitoJwt, checkGoogleJwt } from \"./helpers\";\nimport resolvers from \"./graphql/resolvers\";\nimport { frontendPort, getBackendPort } from \"../src/utils/portUtils\";\n\nrequire(\"dotenv\").config();\n\nconst corsOption = {\n  origin: `http://localhost:${frontendPort}`,\n  credentials: true,\n};\n\nconst schema = loadSchemaSync(join(__dirname, \"./graphql/schema.graphql\"), {\n  loaders: [new GraphQLFileLoader()],\n});\n\nconst schemaWithResolvers = addResolversToSchema({\n  schema,\n  resolvers,\n});\n\nconst app = express();\n\n/* istanbul ignore next */\n// @ts-expect-error\nif (global.__coverage__) {\n  require(\"@cypress/code-coverage/middleware/express\")(app);\n}\n\napp.use(cors(corsOption));\napp.use(logger(\"dev\"));\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.use(\n  session({\n    secret: \"session secret\",\n    resave: false,\n    saveUninitialized: false,\n    unset: \"destroy\",\n  })\n);\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use(paginate.middleware(+process.env.PAGINATION_PAGE_SIZE!));\n\n/* istanbul ignore next */\nif (process.env.NODE_ENV === \"test\" || process.env.NODE_ENV === \"development\") {\n  app.use(\"/testData\", testDataRoutes);\n}\n\napp.use(auth);\n\n/* istanbul ignore if */\nif (process.env.VITE_AUTH0) {\n  app.use(checkAuth0Jwt);\n}\n\n/* istanbul ignore if */\nif (process.env.VITE_OKTA) {\n  app.use(verifyOktaToken);\n}\n\n/* istanbul ignore if */\nif (process.env.VITE_AWS_COGNITO) {\n  app.use(checkCognitoJwt);\n}\n\n/* istanbul ignore if */\nif (process.env.VITE_GOOGLE) {\n  app.use(checkGoogleJwt);\n}\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Cypress Realworld App - backend\");\n});\napp.use(\"/graphql\", gqlPlaygroundRoutes);\napp.use(\n  \"/graphql\",\n  graphqlHandler({\n    schema: schemaWithResolvers,\n    context: async (req, _args) => {\n      return { user: req.raw.user };\n    },\n  })\n);\napp.use(\"/users\", userRoutes);\napp.use(\"/contacts\", contactRoutes);\napp.use(\"/bankAccounts\", bankAccountRoutes);\napp.use(\"/transactions\", transactionRoutes);\napp.use(\"/likes\", likeRoutes);\napp.use(\"/comments\", commentRoutes);\napp.use(\"/notifications\", notificationRoutes);\napp.use(\"/bankTransfers\", bankTransferRoutes);\n\napp.use(express.static(join(__dirname, \"../public\")));\n\ngetBackendPort().then((port) => {\n  app.listen(port);\n});\n"]}