{"version":3,"file":"/Users/alimran/AquaProjects/CypressDemoProject/cypress-realworld-app/backend/transaction-routes.ts","sources":["/Users/alimran/AquaProjects/CypressDemoProject/cypress-realworld-app/backend/transaction-routes.ts"],"names":[],"mappings":"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","sourcesContent":["///<reference path=\"types.ts\" />\n\nimport express from \"express\";\nimport { remove, isEmpty, slice, concat } from \"lodash/fp\";\nimport {\n  getTransactionsForUserContacts,\n  createTransaction,\n  updateTransactionById,\n  getPublicTransactionsDefaultSort,\n  getTransactionByIdForApi,\n  getTransactionsForUserForApi,\n  getPublicTransactionsByQuery,\n} from \"./database\";\nimport { ensureAuthenticated, validateMiddleware } from \"./helpers\";\nimport {\n  sanitizeTransactionStatus,\n  sanitizeRequestStatus,\n  isTransactionQSValidator,\n  isTransactionPayloadValidator,\n  shortIdValidation,\n  isTransactionPatchValidator,\n  isTransactionPublicQSValidator,\n} from \"./validators\";\nimport { getPaginatedItems } from \"../src/utils/transactionUtils\";\nconst router = express.Router();\n\n// Routes\n\n//GET /transactions - scoped user, auth-required\nrouter.get(\n  \"/\",\n  ensureAuthenticated,\n  validateMiddleware([\n    sanitizeTransactionStatus,\n    sanitizeRequestStatus,\n    ...isTransactionQSValidator,\n  ]),\n  (req, res) => {\n    /* istanbul ignore next */\n    const transactions = getTransactionsForUserForApi(req.user?.id!, req.query);\n\n    const { totalPages, data: paginatedItems } = getPaginatedItems(\n      req.query.page as unknown as number,\n      req.query.limit as unknown as number,\n      transactions\n    );\n\n    res.status(200);\n    res.json({\n      pageData: {\n        page: res.locals.paginate.page,\n        limit: res.locals.paginate.limit,\n        hasNextPages: res.locals.paginate.hasNextPages(totalPages),\n        totalPages,\n      },\n      results: paginatedItems,\n    });\n  }\n);\n\n//GET /transactions/contacts - scoped user, auth-required\nrouter.get(\n  \"/contacts\",\n  ensureAuthenticated,\n  validateMiddleware([\n    sanitizeTransactionStatus,\n    sanitizeRequestStatus,\n    ...isTransactionQSValidator,\n  ]),\n  (req, res) => {\n    /* istanbul ignore next */\n    const transactions = getTransactionsForUserContacts(req.user?.id!, req.query);\n\n    const { totalPages, data: paginatedItems } = getPaginatedItems(\n      req.query.page as unknown as number,\n      req.query.limit as unknown as number,\n      transactions\n    );\n\n    res.status(200);\n    res.json({\n      pageData: {\n        page: res.locals.paginate.page,\n        limit: res.locals.paginate.limit,\n        hasNextPages: res.locals.paginate.hasNextPages(totalPages),\n        totalPages,\n      },\n      results: paginatedItems,\n    });\n  }\n);\n\n//GET /transactions/public - auth-required\nrouter.get(\n  \"/public\",\n  ensureAuthenticated,\n  validateMiddleware(isTransactionPublicQSValidator),\n  (req, res) => {\n    const isFirstPage = (req.query.page as unknown as number) === 1;\n\n    /* istanbul ignore next */\n    let transactions = !isEmpty(req.query)\n      ? getPublicTransactionsByQuery(req.user?.id!, req.query)\n      : /* istanbul ignore next */\n        getPublicTransactionsDefaultSort(req.user?.id!);\n\n    const { contactsTransactions, publicTransactions } = transactions;\n\n    let publicTransactionsWithContacts;\n\n    if (isFirstPage) {\n      const firstFiveContacts = slice(0, 5, contactsTransactions);\n\n      publicTransactionsWithContacts = concat(firstFiveContacts, publicTransactions);\n    }\n\n    const { totalPages, data: paginatedItems } = getPaginatedItems(\n      req.query.page as unknown as number,\n      req.query.limit as unknown as number,\n      isFirstPage ? publicTransactionsWithContacts : publicTransactions\n    );\n\n    res.status(200);\n    res.json({\n      pageData: {\n        page: res.locals.paginate.page,\n        limit: res.locals.paginate.limit,\n        hasNextPages: res.locals.paginate.hasNextPages(totalPages),\n        totalPages,\n      },\n      results: paginatedItems,\n    });\n  }\n);\n\n//POST /transactions - scoped-user\nrouter.post(\n  \"/\",\n  ensureAuthenticated,\n  validateMiddleware(isTransactionPayloadValidator),\n  (req, res) => {\n    const transactionPayload = req.body;\n    const transactionType = transactionPayload.transactionType;\n\n    remove(\"transactionType\", transactionPayload);\n\n    /* istanbul ignore next */\n    const transaction = createTransaction(req.user?.id!, transactionType, transactionPayload);\n\n    res.status(200);\n    res.json({ transaction });\n  }\n);\n\n//GET /transactions/:transactionId - scoped-user\nrouter.get(\n  \"/:transactionId\",\n  ensureAuthenticated,\n  validateMiddleware([shortIdValidation(\"transactionId\")]),\n  (req, res) => {\n    const { transactionId } = req.params;\n\n    const transaction = getTransactionByIdForApi(transactionId);\n\n    res.status(200);\n    res.json({ transaction });\n  }\n);\n\n//PATCH /transactions/:transactionId - scoped-user\nrouter.patch(\n  \"/:transactionId\",\n  ensureAuthenticated,\n  validateMiddleware([shortIdValidation(\"transactionId\"), ...isTransactionPatchValidator]),\n  (req, res) => {\n    const { transactionId } = req.params;\n\n    /* istanbul ignore next */\n    updateTransactionById(transactionId, req.body);\n\n    res.sendStatus(204);\n  }\n);\n\nexport default router;\n"]}